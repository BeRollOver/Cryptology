@model Cryptology.Models.ElGamalEncryptionModels

@{
    ViewBag.Title = "El Gamal Encryption";
}

<h2>El Gamal Encryption</h2>
<table class="table table-bordered" style="font-size:larger;">
    <tr class="success">
        <th>
            Пользователь B
        </th>
    </tr>
    <tr>
        <td>
            Пользователь B выбрал числа P = @Model.P, G = @Model.G, X = @Model.X
        </td>
    </tr>
    <tr>
        <td>
            Открытый ключ Y = G <sup>X</sup> mod P = @Model.G <sup>@Model.X</sup> mod @Model.P = @ViewBag.Y
        </td>
    </tr>
    <tr class="success">
        <th>
            Пользователь A
        </th>
    </tr>
    <tr>
        <td>
            Выбрано число K = @Model.K
        </td>
    </tr>
    <tr>
        <td>
            Число K удовлетворяет условиям
        </td>
    </tr>
    <tr>
        <td>
            Вычисляем шифротекст:<br />
            a = G <sup>K</sup> mod P = @Model.G <sup>@Model.K</sup> mod @Model.P = @ViewBag.a<br />
            
            <table>
                <tr>
                    @foreach (var item in Model.Text.ToCharArray())
                    {
                        <th>@item</th>
                    }
                </tr>
                <tr>
                    @foreach (var item in ViewBag.b)
                    {
                        //<td>b = M * Y <sup>K</sup> mod P = @item * @ViewBag</td>
                        <td>@item</td>
                    }
                </tr>
            </table>
        </td>
    </tr>
    <tr class="success">
        <th>
            Пользователь B
        </th>
    </tr>
    <tr>
        <td>
            Вычисление открытого текста<br />
        </td>
    </tr>
    <tr>
        <td>
            a<sup>X</sup> mod P = @ViewBag.a <sup>@Model.X</sup> mod @Model.P = @ViewBag.ax<br />
        </td>
    </tr>
    <tr>
        <td>
            Нахождение обратного элемента a<sup>-X</sup> = @ViewBag.inv_ax
        </td>
    </tr>
    <tr>
        <td>
            <table>
                <tr>
                    @foreach (var item in ViewBag.M)
                    {
                        //<td>b = M * Y <sup>K</sup> mod P = @item * @ViewBag</td>
                        <td>@(item-1040)</td>
                    }
                </tr>
                <tr>
                    @foreach (var item in ViewBag.M)
                    {
                        <th>@Convert.ToChar(item)</th>
                    }
                </tr>
            </table>
        </td>
    </tr>
</table>
